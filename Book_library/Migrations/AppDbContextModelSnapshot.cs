// <auto-generated />
using System;
using Book_library.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Book_library.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("int");

                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("Book_library.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "jk.rowling@example.com",
                            Name = "J.K. Rowling",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = 2,
                            Email = "george.martin@example.com",
                            Name = "George R.R. Martin",
                            PhoneNumber = "0987654321"
                        },
                        new
                        {
                            Id = 3,
                            Email = "tolkien@example.com",
                            Name = "J.R.R. Tolkien",
                            PhoneNumber = "4561237890"
                        },
                        new
                        {
                            Id = 4,
                            Email = "stephen.king@example.com",
                            Name = "Stephen King",
                            PhoneNumber = "3216549870"
                        },
                        new
                        {
                            Id = 5,
                            Email = "agatha.christie@example.com",
                            Name = "Agatha Christie",
                            PhoneNumber = "7890123456"
                        },
                        new
                        {
                            Id = 6,
                            Email = "mark.twain@example.com",
                            Name = "Mark Twain",
                            PhoneNumber = "2345678901"
                        },
                        new
                        {
                            Id = 7,
                            Email = "jane.austen@example.com",
                            Name = "Jane Austen",
                            PhoneNumber = "3456789012"
                        },
                        new
                        {
                            Id = 8,
                            Email = "charles.dickens@example.com",
                            Name = "Charles Dickens",
                            PhoneNumber = "4567890123"
                        },
                        new
                        {
                            Id = 9,
                            Email = "ernest.hemingway@example.com",
                            Name = "Ernest Hemingway",
                            PhoneNumber = "5678901234"
                        },
                        new
                        {
                            Id = 10,
                            Email = "scott.fitzgerald@example.com",
                            Name = "F. Scott Fitzgerald",
                            PhoneNumber = "6789012345"
                        });
                });

            modelBuilder.Entity("Book_library.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("PublishedYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PublishedYear = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            Id = 2,
                            PublishedYear = new DateTime(1996, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "A Game of Thrones"
                        },
                        new
                        {
                            Id = 3,
                            PublishedYear = new DateTime(1937, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Hobbit"
                        },
                        new
                        {
                            Id = 4,
                            PublishedYear = new DateTime(1977, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Shining"
                        },
                        new
                        {
                            Id = 5,
                            PublishedYear = new DateTime(1934, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Murder on the Orient Express"
                        },
                        new
                        {
                            Id = 6,
                            PublishedYear = new DateTime(1884, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Adventures of Huckleberry Finn"
                        },
                        new
                        {
                            Id = 7,
                            PublishedYear = new DateTime(1813, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 8,
                            PublishedYear = new DateTime(1861, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Great Expectations"
                        },
                        new
                        {
                            Id = 9,
                            PublishedYear = new DateTime(1952, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Old Man and the Sea"
                        },
                        new
                        {
                            Id = 10,
                            PublishedYear = new DateTime(1925, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Great Gatsby"
                        });
                });

            modelBuilder.Entity("Book_library.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Classics"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Biography"
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("Book_library.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Book_library.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("Book_library.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Book_library.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
